import javax.swing.JButton
import javax.swing.JFrame
import javax.swing.JOptionPane
import javax.swing.JPanel
import javax.swing.JPasswordField
import javax.swing.WindowConstants
import java.awt.Dimension
import java.awt.GridLayout
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.awt.event.KeyEvent
import java.awt.event.KeyListener
import java.util.concurrent.CountDownLatch

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext.configFile = file('build.properties')

ext.config = parseConfig(configFile)

version = "${config.version}-${config.build_number}"
group = "vazkii.quark" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name
def archiveGroup = "vazkii"

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "eclipse/assets"

    mappings = config.mc_mappings
    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version

    // Scala: not even once
    replace 'scala.actors.threadpool.Arrays', 'java.util.Arrays'

    makeObfSourceJar = false
}

task checkBuild() {
    //Check if signing is enabled when building
    if (project.gradle.startParameter.taskNames.contains("build") && (!project.hasProperty('keyStore') || !project.hasProperty('storeAlias'))) {
        logger.log(LogLevel.WARN, 'Building without jarsigning! Please specify the keyStore and storeAlias property to enable!')
    }
}

def signPass
task setupKeys() {
    onlyIf {
        project.hasProperty('keyStore')
    }
    if (project.hasProperty('keyStore')) {
        def gui = new SimplePasswordQuery()
        gui.latch.await()
        signPass = gui.getPasswordAndDiscard()
    }
}

//Everything from here til the marker is inspired from ImmersiveEngineering. Many thanks!
reobf {
    coreJar {mappingType = 'SEARGE'}
}

def coremodFiles = 'vazkii/quark/base/asm/**'
task coreJar(type: Jar) {
    // Copy all compiled files and resources from the source set to the JAR
    // If you have additional source sets, add the same logic here
    from(sourceSets.main.output) {
        // Don't include the coremod in the main mod
        // If you have more coremod-related packages that aren't nested in the main one, add exclusions for them
        include coremodFiles
    }
    manifest {
        attributes "FMLCorePlugin": "vazkii.quark.base.asm.LoadingPlugin"
        attributes 'Maven-Artifact': archiveGroup+':'+archivesBaseName+'-core:'+version
    }
    // Add a classifier to the JAR ('-core' at the end of the file name)
    // Distinguishes the mod JAR from the shipped one
    classifier 'core'
    group = 'build'
}

task signCoreJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfCoreJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = signPass
        keyPass = signPass
        inputFile = coreJar.archivePath
        outputFile = coreJar.archivePath
    }
}

task signMainJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = signPass
        keyPass = signPass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

signMainJar.dependsOn setupKeys
signCoreJar.dependsOn setupKeys
build.dependsOn signMainJar
jar.dependsOn signCoreJar

def libPrefix = 'META-INF/libraries'
jar {
    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"

    manifest {
        attributes 'ContainedDeps': libPrefix+'/'+coreJar.archivePath.name
        attributes 'Maven-Artifact': archiveGroup+':'+archivesBaseName+':'+version
    }
    exclude coremodFiles
    // Add the output of the mod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
        into libPrefix
    }
}
//IE inspired stuff END

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': config.mc_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info', '**/psd/**'
    }
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${baseName}-${version}-deobf.${extension}"
}

artifacts {
    archives deobfJar
}
/**
 * Increments the buildnumber when building in your config file, and saves it.
 */
task incrementBuildNumber {
    def isBuilding = project.gradle.startParameter.taskNames.contains("build")
    onlyIf {
        isBuilding
    }
    if (isBuilding) {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

// I have no idea what I'm doing
task wtfGradle2(type: Copy) {
    from(jar.destinationDir)
    into file("${config.dir_output}/wtf")
}

// Seriously, I'm desperate to make this work
task wtfGradle1(type: Delete) {
    dependsOn "wtfGradle2"
    delete "${config.dir_output}/wtf/${deobfJar.archiveName}"
}

task output(type: Copy) {
    dependsOn "wtfGradle1"
    from(jar.destinationDir)
    into file(config.dir_output)
}

task outputDeobf(type: Copy) {
    dependsOn "output"
    from(config.dir_output) {
        include deobfJar.archiveName
    }
    into file("${config.dir_output}/deobf")
}

task sort(type: Delete) {
    dependsOn "outputDeobf"
    delete "${config.dir_output}/${deobfJar.archiveName}", "${config.dir_output}/wtf"
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

defaultTasks 'clean', 'build', 'sort', 'incrementBuildNumber', 'checkBuild'

@SuppressWarnings("all")
class SimplePasswordQuery implements ActionListener, KeyListener {
    private final CountDownLatch latch = new CountDownLatch(1);
    private final JFrame frame = new JFrame("KeySigner Password");
    private final JPanel login = new JPanel(new GridLayout(2, 1));
    private String password;
    private JPasswordField field = new JPasswordField();

    public SimplePasswordQuery() {
        frame.setContentPane(login);
        field.addKeyListener(this);
        login.add(field);
        JButton okBtn = new JButton("OK");
        okBtn.addActionListener(this);
        login.add(okBtn);
        frame.setMinimumSize(new Dimension(320, 200));
        frame.setVisible(true);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    }

    public CountDownLatch getLatch() {
        return latch;
    }

    public String getPasswordAndDiscard() {
        String s = password;
        frame.dispose();
        login.removeAll();
        password = null;
        return s;
    }

    private void checkPW() {
        password = new String(field.getPassword());
        if (!password.equals(""))
            latch.countDown();
        else
            JOptionPane.showMessageDialog(frame, "No password is not an option!")
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        checkPW();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER)
            checkPW();
    }

    @Override public void keyReleased(KeyEvent e) {}
    @Override public void keyTyped(KeyEvent e) {}
}